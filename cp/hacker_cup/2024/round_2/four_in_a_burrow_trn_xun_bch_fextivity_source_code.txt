#include <bits/stdc++.h>
using namespace std;

#if __cplusplus < 202002L
template <class T> int ssize(const T& a){ return a.size(); }
#endif
template <class T1, class T2> istream& operator>> (istream& in, pair <T1, T2>& a){ in >> a.first >> a.second; return in; }
template <class T> istream& operator>> (istream& in, vector <T>& a){ for (auto &x: a){ in >> x; } return in; }

using ll = long long;
using ld = long double;

int hash_height(const vector <int>& height){
	int ans = 0;
	for (auto &h: height){
		ans = ans * 7 + h;
	}
	return ans;
}

char switch_state(char c){
	return c == 'C' ? 'F' : 'C';
}

vector <pair <int, int>> dir = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}};

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
#ifdef LOCAL
	if (fopen("input.txt", "r")){
		freopen("four_in_a_burrow_input.txt", "r", stdin);
		freopen("output1.txt", "w", stdout);
	}
#endif
int tests; cin >> tests; for (auto test = 1; test <= tests; test++){
	cout << "Case #" << test << ": ";

	int n = 6, m = 7;
	vector a(n, vector(m, '?'));
	for (auto i = n - 1; i >= 0; i--){
		cin >> a[i];
	}

	bool c_win = false, f_win = false;
	vector <bool> end_able(1'000'000);

	vector <bool> visited(1'000'000);
	vector <int> height(m, 0);

	fill(begin(height), end(height), n);
	auto backtrack_back = [&](auto&& self, char turn = 'F')->void{
		// for (auto &x: height){
		// 	cout << x;
		// } cout << endl;
		end_able[hash_height(height)] = true;
		for (auto j = 0; j < m; j++){
			if (height[j] != 0 and a[height[j] - 1][j] == turn){
				height[j]--;
				if (not end_able[hash_height(height)]){
					self(self, switch_state(turn));
				}
				height[j]++;
			}
		}
	};
	backtrack_back(backtrack_back);

	assert(end_able[0]);

	fill(begin(height), end(height), 0);
	auto backtrack_front = [&](auto&& self, char turn = 'C')->void{
		// for (auto &x: height){
		// 	cout << x;
		// } cout << endl;
		visited[hash_height(height)] = true;
		for (auto j = 0; j < m; j++){
			if (height[j] != n and a[height[j]][j] == turn){
				height[j]++;
				if (end_able[hash_height(height)] and not visited[hash_height(height)]){
					bool has_line = false;
					for (auto &[dx, dy]: dir){
						for (auto offset = 0; offset <= 3; offset++){
							auto x = height[j] - 1 - dx * offset, y = j - dy * offset;
							bool ok = true;
							for (auto len = 0; len <= 3; len++){
								if (not (0 <= x and x < n and 0 <= y and y < m)){
									ok = false;
									break;
								}
								if (x >= height[y]){
									ok = false;
									break;
								}
								if (a[x][y] != turn){
									ok = false;
									break;
								}
								x += dx; y += dy;
							}

							if (ok){
								has_line = true;
								break;
							}
						}
						if (has_line){
							break;
						}
					}

					if (has_line){
						visited[hash_height(height)] = true;
						if (turn == 'C'){
							c_win = true;
						}
						else{
							f_win = true;
						}
					}
					else{
						self(self, switch_state(turn));
					}
				}
				height[j]--;
			}
		}
	};
	backtrack_front(backtrack_front);

	if (c_win and f_win){
		cout << "?" << "\n";
	}
	else if (c_win){
		cout << "C" << "\n";
	}
	else if (f_win){
		cout << "F" << "\n";
	}
	else{
		cout << "0" << "\n";
	}
}
}