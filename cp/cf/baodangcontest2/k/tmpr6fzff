use std::io;
use std::cmp;
fn read_i32() -> i32 {
  let mut number: String = String::new();
  io::stdin()
    .read_line(&mut number)
    .expect("Failed to read int32 in a line");
  number.trim().parse::<i32>().expect("Not i32")
}

fn read_vec_i64() -> Vec<i64> {
  let mut numbers: String = String::new();
  io::stdin()
    .read_line(&mut numbers)
    .expect("Failed to read line");
  numbers
    .trim()
    .split_whitespace()
    .map(|i: &str| i.parse().unwrap())
    .collect()
}

fn main() {
  // let tests = read_i32();
  let tests = 1;
  for _test in 0..tests {
    let n = read_i32() as usize;
    let X = read_i32() as i64;
    let a : Vec<i64> = read_vec_i64();
    let mut ans : i64 = 0;
    let mut pre : Vec<i64> = vec![0; n];
    let mut suf : Vec<i64> = vec![0; n];
    for i in 1..n {
      let mut curr : i64 = 0;
      for j in 0..i {
        if a[i] >= a[j] {
          curr = cmp::max(curr, a[i] + a[j]);
        }
      }
      pre[i] = curr; 
    }
    for i in 0..n - 1 {
      let mut curr : i64 = 0;
      for j in i + 1..n {
        if a[j] >= a[i] {
          curr = cmp::max(curr, a[i] + a[j]);
        }
      }
      suf[i] = curr;
    }
    for i in 0..n-2 {
      for j in i + 1..n - 1{
        if a[j] >= a[i] {
          ans = cmp::max(ans, pre[i] + suf[i + 1]);
        }
      }
    }
    X -= ans;
    if X - ans <= 0 {
      X = 0;
    }
    printl("{X}");
  }
}

